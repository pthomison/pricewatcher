apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pricewatcher
  labels:
    k8s-app: pricewatcher
spec:
  serviceName: "pricewatcher"
  replicas: 1
  selector:
    matchLabels:
      k8s-app: pricewatcher
  template:
    metadata:
      labels:
        k8s-app: pricewatcher
      name: pricewatcher
    spec:
      initContainers:
      - name: init-litestream
        image: {{ .Values.litestream.image.name }}:{{ .Values.litestream.image.tag }}
        args:
        - 'restore'
        - '-if-db-not-exists'
        - '-if-replica-exists'
        - '-v'
        - -o 
        - {{ .Values.dbLocation }}
        - {{ .Values.s3Bucket }}
        env:
        {{- range $key, $value := .Values.envVarsFromSecret }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $value.secretKeyRef | quote }}
              key: {{ $value.key | quote }}
        {{- end }}
        volumeMounts:
        - name: shared-data
          mountPath: /data

      containers:
      - name: pricewatcher
        image: pthomison/pricewatcher:{{ .Values.image.tag }}
        args:
        - --dbfile={{ .Values.dbLocation }}
        volumeMounts:
        - name: shared-data
          mountPath: /data

      - name: litestream
        image: {{ .Values.litestream.image.name }}:{{ .Values.litestream.image.tag }}
        args:
        - replicate
        - {{ .Values.dbLocation }}
        - {{ .Values.s3Bucket }}
        env:
        {{- range $key, $value := .Values.envVarsFromSecret }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $value.secretKeyRef | quote }}
              key: {{ $value.key | quote }}
        {{- end }}
        volumeMounts:
        - name: shared-data
          mountPath: /data

  volumeClaimTemplates:
  - metadata:
      name: shared-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 5Gi